- form_for [:admin, model] do |f|
  = f.hidden_field 'lock_version'
  = render_region :form_top
  .form-area
    - render_region :form do |form|
      - form.edit_title do
        %p.title
          %label{:for=>"#{model_symbol}_name"} Name
          = f.text_field "name", :class => 'textbox', :maxlength => 100
      - form.edit_content do
        %p.content
          %label{:for=>"#{model_symbol}_content"} Body
          ~ f.text_area "content", :class => "textarea large", :style => "width: 100%"
        -# create a region called content_bottom so extensions can add
        -# their own items (i.e. allow for a minify checkbox).
        .set
          - render_region :content_bottom do |content_bottom|
            - content_bottom.edit_filter do
              -# creata a filter drop-down *only* if there are any filters installed
              - unless (model_name + "Filter").constantize.descendants.empty?
                %p
                  %label{:for=>"#{model_symbol}_filter"} Filter
                  = select_tag "#{model_symbol}[filter_id]", options_for_select([['<none>', '']] + (model_name + "Filter").constantize.descendants.map { |f| f.filter_name }.sort, model.filter_id), :id => "#{model_symbol}_filter"
                  %span.reference_links
                    == #{t('reference')}:
                    %span{:id => "filter_reference_link"}
                      = link_to_function t('filter'), "loadFilterReference();"
                    %span{:id => "tag_reference_link"}
                      = link_to_function t('available_tags'), "loadTagReference('Page');"
      - form.edit_timestamp do
        = updated_stamp model
  
  = javascript_tag %{$("#{model_symbol}_name").activate()}
  
  - render_region :form_bottom do |form_bottom|
    - form_bottom.edit_buttons do
      %p.buttons{:style => "clear: left"} 
        = save_model_button(model)
        = save_model_and_continue_editing_button(model)
        or
        = link_to 'Cancel', send("admin_#{model_symbol}s_path")
